# Default values for ejabberd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Standard Helm chart settings
nameOverride: ""
fullnameOverride: ""

replicaCount: 1

# This section defines which image to use and how to pull it
image:
  # Find all available tags / relases in:
  # https://github.com/processone/ejabberd/pkgs/container/ejabberd
  repository: ghcr.io/processone/ejabberd
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # Name of the service account to use. If empty, a name is generated using the fullname template
  name: ""

# Additional annotations for the pod
podAnnotations: {}
# Additional labels for the pod
podLabels: {}

# Security settings for the Deployment Pod and its containers.
# The settings below are the recommended, least-privilege values.
# For more details refer to https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  fsGroup: 9000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 9000
  runAsGroup: 9000

# The Kubernetes Service that exposes the ejabberd server.
# To make the server available outside the cluster, the type should be change to `NodePort` or `LoadBalancer`.
service:
  type: ClusterIP

certificate:
  secretName: ""
  # Note that this feature requires an existing CertManager setup
  create: false
  # issuerRef:
  #   group: cert-manager.io
  #   kind: ClusterIssuer
  #   name: "letsencrypt-production"

# Storage for the ejabberd server.
# By default, ejabberd comes with its own embedded database.
# Even if you use an external database, ejabberd needs some storage for handling file uploads, avatars etc.
persistence:
  # If disabled, an emptyDir (ephemeral!) will be mounted to the pod instead.
  enabled: false
  claimName: ""
  size: 1Gi
  storageClassName: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

networkPolicy:
  enabled: false
  # allowIngressFromNamespaces:
  #   matchLabels:
  #     kubernetes.io/metadata.name: kube-system
  # allowIngressFromPods:
  #   matchLabels:
  #     svccontroller.k3s.cattle.io/svcname: ejabberd
  #     svccontroller.k3s.cattle.io/svcnamespace: ejabberd

# If a new secret should be created to store the contents of the config below
# If you set this to false, you are required to supply your own configuration as a Kubernetes Secret.
createConfigSecret: true
# The name of the config secret. If empty, the name is generated automatically based on the chart name.
configSecretName: ""

# The ejabberd server will automatically reload whenever the configuration file changes.
config:

  ###              ejabberd configuration file
  ###
  ### The parameters used in this configuration file are explained at
  ###
  ###       https://docs.ejabberd.im/admin/configuration
  ###
  ###                 For an example config see
  ###
  ### https://github.com/processone/ejabberd/blob/master/ejabberd.yml.example

  hosts:
    - localhost

  # loglevel can be one of: none | emergency | alert | critical | error | warning | notice | info | debug
  loglevel: "info"

  # certificates mounted from secrets
  certfiles:
    - "/opt/ejabberd/certs/tls.crt"
    - "/opt/ejabberd/certs/tls.key"

  # certificates are managed elsewhere, do not attempt to get certs automatically
  acme:
    auto: false
